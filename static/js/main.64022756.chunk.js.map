{"version":3,"sources":["components/OnCopy.js","components/OnCut.js","App.js","serviceWorker.js","index.js"],"names":["OnCopy","useState","copiedText","setCopiedText","isCopied","onCopy","handleOnCopy","e","a","console","log","type","setTimeout","navigator","clipboard","readText","then","text","catch","err","style","minHeight","className","color","OnCut","cuttedText","setCuttedText","isCutted","onCut","handleOnCut","clipboardData","defaultValue","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"4QAEe,SAASA,IAAU,IAAD,EACOC,mBAAS,IADhB,mBACtBC,EADsB,KACVC,EADU,OAEFF,oBAAS,GAFP,mBAEtBG,EAFsB,KAEZC,EAFY,KAIvBC,EAAY,sCAAG,WAAOC,GAAP,SAAAC,EAAA,qDACjBC,QAAQC,IAAI,UAAWH,EAAEI,MACzBN,GAAO,GACPO,WAAW,WACPP,GAAO,IACR,KACHQ,UAAUC,UAAUC,WACfC,KAAK,SAAAC,GAEFR,QAAQC,IAAI,iBAAkBO,GAC9Bd,EAAcc,KAEjBC,MAAM,SAAAC,GAEHV,QAAQC,IAAI,uBAAwBS,KAd3B,yCAAH,sDAkBlB,OACI,yBAAKC,MAAO,CAAEC,UAAW,UACrB,uBAAGC,UAAU,kBAAiB,0CAA9B,UACA,wBAAIjB,OAAQC,GAAZ,+DACCF,EACI,6CAAkB,0BAAMgB,MAAO,CAAEG,MAAO,QAAUrB,IAA2B,MC3B/E,SAASsB,IAAS,IAAD,EACQvB,mBAAS,IADjB,mBACrBwB,EADqB,KACTC,EADS,OAEFzB,oBAAS,GAFP,mBAErB0B,EAFqB,KAEXC,EAFW,KAItBC,EAAW,sCAAG,WAAOtB,GAAP,SAAAC,EAAA,qDAChBC,QAAQC,IAAI,UAAWH,EAAEI,MACzBF,QAAQC,IAAI,UAAWH,EAAEuB,eACzBrB,QAAQC,IAAI,UAAWH,GACvBqB,GAAM,GACNhB,WAAW,WACPgB,GAAM,IACP,KACHf,UAAUC,UAAUC,WACfC,KAAK,SAAAC,GAEFR,QAAQC,IAAI,iBAAkBO,GAC9BS,EAAcT,KAEjBC,MAAM,SAAAC,GAEHV,QAAQC,IAAI,uBAAwBS,KAhB5B,yCAAH,sDAoBjB,OACI,yBAAKC,MAAO,CAAEC,UAAW,UACrB,uBAAGC,UAAU,kBAAiB,yCAA9B,UACA,2BAAOM,MAAOC,EAAalB,KAAK,OAAOoB,aAAa,+DACnDJ,EACI,6CAAkB,0BAAMP,MAAO,CAAEG,MAAO,QAAUE,IAA2B,MCD/EO,MAtBf,WACE,OACE,yBAAKV,UAAU,aACb,wBAAIA,UAAU,oBAAd,0BACA,kBAACtB,EAAD,MACA,kBAACwB,EAAD,QCDcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,gB","file":"static/js/main.64022756.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function OnCopy() {\n    const [copiedText, setCopiedText] = useState('');\n    const [isCopied, onCopy] = useState(false);\n\n    const handleOnCopy = async (e) => {\n        console.log('type =>', e.type);\n        onCopy(true);\n        setTimeout(() => {\n            onCopy(false);\n        }, 3000);\n        navigator.clipboard.readText()\n            .then(text => {\n                // `text` contains the text read from the clipboard\n                console.log('copied text =>', text);\n                setCopiedText(text);\n            })\n            .catch(err => {\n                // maybe user didn't grant access to read from clipboard\n                console.log('Something went wrong', err);\n            });\n    };\n\n    return (\n        <div style={{ minHeight: '150px' }}>\n            <p className=\"bg-warning p-2\"><strong>onCopy</strong> Event</p>\n            <h4 onCopy={handleOnCopy}>Copy part or full of this string and see copied text bellow</h4>\n            {isCopied ?\n                (<p>Copied Text -> <span style={{ color: 'red' }}>{copiedText}</span></p>) : (null)\n            }\n        </div>\n    )\n}\n","import React, { useState } from 'react';\n\nexport default function OnCut() {\n    const [cuttedText, setCuttedText] = useState('');\n    const [isCutted, onCut] = useState(false);\n\n    const handleOnCut = async (e) => {\n        console.log('type =>', e.type);\n        console.log('type =>', e.clipboardData);\n        console.log('type =>', e);\n        onCut(true);\n        setTimeout(() => {\n            onCut(false);\n        }, 5000);\n        navigator.clipboard.readText()\n            .then(text => {\n                // `text` contains the text read from the clipboard\n                console.log('copied text =>', text);\n                setCuttedText(text);\n            })\n            .catch(err => {\n                // maybe user didn't grant access to read from clipboard\n                console.log('Something went wrong', err);\n            });\n    };\n\n    return (\n        <div style={{ minHeight: '150px' }}>\n            <p className=\"bg-warning p-2\"><strong>OnCut</strong> Event</p>\n            <input onCut={handleOnCut} type='text' defaultValue='Cut part or full of this string and see copied text bellow' />\n            {isCutted ?\n                (<p>Cutted Text -> <span style={{ color: 'red' }}>{cuttedText}</span></p>) : (null)\n            }\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport './App.css';\n// import ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n// import { Button } from 'react-bootstrap';\n// import Navbar from './components/Navbar';\nimport OnCopy from './components/OnCopy';\nimport OnCut from './components/OnCut';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h3 className=\"text-center my-3\">React Synthetic Events</h3>\n      <OnCopy />\n      <OnCut />\n      {/* <Navbar /> */}\n      {/* <ButtonToolbar>\n        <Button variant=\"primary\">Primary</Button>\n        <Button variant=\"secondary\">Secondary</Button>\n        <Button variant=\"success\">Success</Button>\n        <Button variant=\"warning\">Warning</Button>\n        <Button variant=\"danger\">Danger</Button>\n        <Button variant=\"info\">Info</Button>\n        <Button variant=\"light\">Light</Button>\n        <Button variant=\"dark\">Dark</Button>\n        <Button variant=\"link\">Link</Button>\n      </ButtonToolbar> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}